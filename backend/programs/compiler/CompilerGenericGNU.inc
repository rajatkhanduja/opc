<?php
/**
 * Copyright 2007-2009 Chennai Mathematical Institute
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @file   CompilerGenericGNU.inc
 * @author Arnold Noronha <arnold@cmi.ac.in>
 */


class CompilerGenericGNU { 

  /**
   * The command line argument to compile the program
   *
   */
  var $compiler_string="/usr/bin/g++ -Wall -O2 -x c++ ";

  /**
   * The error message generated by the last command
   *
   */
  var $error ;

  /**
   * The executable output created by the compiler
   *
   */ 
  var $output_exec = "";

  var $compiler_params = "" ;

  public function  __construct($compiler_options = "") {
	$this->output_exec = tempnam (
							config::$compile_temp_directory,
							"Exec_" ) ;
	$this->compiler_params = $compiler_options ;
  }


  /**
   * compile the code
   *
   * @param $path_to_code string path to the C++ code.
   * @returns boolean the failure or success of compilation
   */

  public function compile($path_to_code) {
	$exe = $this->compiler_string  
	  . escapeshellarg($path_to_code) . " -o " . 
	  $this->output_exec . " -x  none " . $this->compiler_params;

	$ret = runandgetoutputerr ($exe,$bluff,$this->error);
	if ( $ret == 0 ) chmod($this->output_exec, 0711);
	return ($ret == 0); 
  }

  /**
   * Get the error output
   *
   * @return string containing the error output
   */
  public function get_error() {
	return $this->error; 
  }
  
  /**
   * Get the exec string
   * 
   * @return string
   */
  public function get_exec_string() {

	return $this->output_exec;
  }

  public function __destruct() {
	if (defined('DEBUG')) echo "Cleaning up compiler\n";
	else unlink($this->output_exec); 
  }

  public function get_exec_dir() {
	return "." ; // Generic compiles need not change directory
  }


}
?>
